#!/usr/bin/python

import sys
import os
import colorama

# find a way to import these via a config file
LAVA_DIR = os.path.dirname(os.path.abspath(sys.argv[0]))
PANDA_DIR = os.path.abspath(os.path.join(LAVA_DIR, "../panda"))
CLANG_DIR = os.path.join(os.environ["HOME"], "llvm-3.6.1")

PANDA_UBUNTU = "https://raw.githubusercontent.com/panda-re/panda/master/panda/scripts/install_ubuntu.sh"
# libc6 needed for compiling btrace
# libjsoncpp needed for fbi json parsing
# don't think that we need to install odb here because we directly grab the
# source from where it's hosted
LAVA_DEPS = ["libc6-dev-i386", "libjsoncpp-dev", "postgresql", "postgresql-contrib", "libpq-dev"]
USER = os.environ["USER"]

def progress(msg):
    print colorama.Fore.GREEN + msg + colorama.Fore.RESET

def error(msg):
    print colorama.Fore.RED + msg + colorama.Fore.RESET
    sys.exit(1)

def lava_system(cmd):
    rc = os.system(cmd)
    print "Running [{}] . . . ".format(cmd)
    if rc != 0:
        error("[{}] cmd did not execute properly.  Return code of {}".format(cmd, rc))


def main():
    progress("Installing LAVA apt-get dependencies")
    lava_system("sudo apt-get -y install {}".format(" ".join(LAVA_DEPS)))

    progress("In LAVA dir at {}".format(LAVA_DIR))
    # check to make sure we are not running as root/sudo
    if os.getuid() == 0:
        error("sudo/root privileges detected.  Run as user\nUSAGE: {}".format(sys.argv[0]))

    # check that user has docker install and docker privileges
    # if not exit and tell user to install docker (?)

    # check that user has the LAVA build docker vm build
    # if not run python scripts/build-docker.py
    progress("Checking that lava_guest docker is properly built")
    if False:
        build_docker = os.path.join(LAVA_DIR, "scripts/build-docker.py")
        lava_system("python {}".format(build_docker))

    # check for existence of folder /nas/$USER
    progress("Checking for /nas/" + USER)
    if not os.path.isdir("/nas/" + USER):
        lava_system("sudo mkdir -p /nas/" + USER)

    # ensure /etc/apt/sources.list has all of the deb-src lines uncommented 
    progress("Uncommenting deb-src lines in /etc/apt/sources.list")
    patch_sources = os.path.join(LAVA_DIR, "scripts/patch-sources.py")
    lava_system("sudo python {}".format(patch_sources))

    # check for location of panda in PANDA_DIR
    # make sure that it is PANDA2
    progress("Checking for PANDA in " + PANDA_DIR)
    if not os.path.isdir(PANDA_DIR):
        os.chdir(os.path.dirname(PANDA_DIR))
        lava_system("wget {}".format(PANDA_UBUNTU))
        lava_system("chmod +x ./install_ubuntu.sh")
        lava_system("./install_ubuntu.sh")
        os.chdir(LAVA_DIR)

    progress("Checking for ODB orm libraries")
    ODB_PRESENT = (os.path.isfile("/usr/local/lib/libodb-pgsql.so") and 
                   os.path.isfile("/usr/local/lib/libodb.so") and
                   os.path.isfile("/usr/bin/odb"))
    if not ODB_PRESENT:
        os.chdir(os.environ["HOME"])
        odb_version="2.4.0"
        odb_baseurl="http://www.codesynthesis.com/download/odb/2.4/"
        lava_system("wget {}/odb_{}-1_amd64.deb".format(odb_baseurl, odb_version))
        lava_system("sudo dpkg -i odb_{}-1_amd64.deb".format(odb_version))
        lava_system("wget {}/libodb-{}.tar.gz".format(odb_baseurl, odb_version))
        lava_system("tar -xzvf libodb-{}.tar.gz".format(odb_version))
        os.chdir("libodb-{}/".format(odb_version))
        lava_system("./configure  && make -j && sudo make install")
        os.chdir("../")
        lava_system("wget {}/libodb-pgsql-{}.tar.gz".format(odb_baseurl, odb_version))
        lava_system("tar -xzvf libodb-pgsql-{}.tar.gz".format(odb_version))
        os.chdir("libodb-pgsql-{}/".format(odb_version))
        lava_system("./configure  && make -j && sudo make install")
        progress("Finished installing ODB libraries")
        progress("Feel free to delete the artifacts in" +
                 " {}".format(os.environ["HOME"]))
        os.chdir(LAVA_DIR)

    # check for clang 3.6.1 in CLANG_DIR
    progress("Checking for clang 3.6.1 in " + CLANG_DIR)
    if not os.path.isdir(CLANG_DIR):
        get_clang = os.path.join(LAVA_DIR, "scripts/get-clang.sh")
        os.chdir(os.path.dirname(CLANG_DIR))
        lava_system("sudo apt-get install -y cmake")
        lava_system("{}".format(get_clang))
        os.chdir(LAVA_DIR)
        with open("src_clang/config.mak", "w") as f:
            f.write("# this is an autogenerated file based off of install location of 3.6.1\n")
            f.write("LLVM_SRC_PATH := {}\n".format(CLANG_DIR))
            f.write("LLVM_BUILD_PATH := {}\n".format(CLANG_DIR))
            f.write("LLVM_BIN_PATH := {}\n".format(os.path.join(CLANG_DIR, "Release/bin")))

    progress("Checking for libexec folder in $LAVA_DIR")
    if not os.path.isdir(os.path.join(LAVA_DIR, "libexec")):
        lava_system("btrace/compile.sh")
   
    progress("Making each component of lava, fbi and lavaTool")

    progress("Checking for $LAVA_DIR/config.mak")
    if not os.path.isfile(os.path.join(LAVA_DIR, "src_clang/config.mak")):
        with open("src_clang/config.mak", "w") as f:
	    f.write("# this is an autogenerated file based off of install location of 3.6.1\n")
	    f.write("LLVM_SRC_PATH := {}\n".format(CLANG_DIR))
	    f.write("LLVM_BUILD_PATH := {}\n".format(CLANG_DIR))
            f.write("LLVM_BIN_PATH := {}\n".format(os.path.join(CLANG_DIR, "Release+Asserts/bin")))

    progress("Compiling fbi")
    if not os.path.isfile(os.path.join(LAVA_DIR, "panda/fbi")):
        os.chdir(os.path.join(LAVA_DIR, "panda"))
        lava_system("PANDA_CONFIG_MAK={} make".format(os.path.join(PANDA_DIR, "build")))
        os.chdir(LAVA_DIR)
        
    return 0

if __name__ == "__main__":
    sys.exit(main())
