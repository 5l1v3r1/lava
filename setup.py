#!/usr/bin/python

import sys
import os
import colorama
from multiprocessing import cpu_count

LLVM_VERSION="3.6.2"

LAVA_DIR = os.path.dirname(os.path.abspath(sys.argv[0]))
os.chdir(LAVA_DIR)

# try to import lava.mak as a config file
# if not then resort to default locations for llvm and panda
try:
    def_lines = (line.strip() for line in open("lava.mak", "r") if not line.strip().startswith("#")
             and line.strip() != "")
    def_lines = (line.split(":=") for line in def_lines)
    def_lines = ((line[0].strip(), line[1].strip()) for line in def_lines)
    LAVA_CONFS = dict(def_lines)
    PANDA_DIR = LAVA_CONFS["PANDA_SRC_PATH"]
    LLVM_DIR = LAVA_CONFS["LLVM_SRC_PATH"]
    BUILD_DIR = os.path.dirname(LLVM_DIR)
except:
    PANDA_DIR = os.path.abspath(os.path.join(LAVA_DIR, "../panda"))
    BUILD_DIR = os.path.join(os.environ["HOME"], "build")
    LLVM_DIR = os.path.join(BUILD_DIR, "llvm-" + LLVM_VERSION)

PANDA_UBUNTU = "https://raw.githubusercontent.com/panda-re/panda/master/panda/scripts/install_ubuntu.sh"
# libc6 needed for compiling btrace
# libjsoncpp needed for fbi json parsing
# don't think that we need to install odb here because we directly grab the
# source from where it's hosted
LAVA_DEPS = ["libc6-dev-i386", "libjsoncpp-dev", "postgresql",
             "libpq-dev", "cmake"]
USER = os.environ["USER"]

PANDA_MAK = """
# This is an autogenerated file from lava/setup.py.
PANDA_SRC_PATH := {PANDA_DIR}
PANDA_BUILD_DIR := {PANDA_DIR}/build
"""
LLVM_MAK = """
# This is an autogenerated file from lava/setup.py.
LLVM_SRC_PATH := {LLVM_SRC_PATH}
LLVM_BUILD_PATH := {LLVM_BUILD_PATH}
LLVM_BIN_PATH := $(LLVM_BUILD_PATH)/Release/bin
"""

def progress(msg):
    print(colorama.Fore.GREEN + msg + colorama.Fore.RESET)

def error(msg):
    print(colorama.Fore.RED + msg + colorama.Fore.RESET)
    sys.exit(1)

def lava_system(cmd):
    rc = os.system(cmd)
    print("Running [{}] . . . ".format(cmd))
    if rc != 0:
        error("[{}] cmd did not execute properly.  Return code of {}".format(cmd, rc))

def is_package_installed(pkg):
    if (os.path.isfile(os.path.join("/usr/bin", pkg)) or
        os.path.isfile(os.path.join("/bin", pkg))):
        return True
    rc = os.system("dpkg -s {}".format(pkg))
    return rc == 0

def main():
    progress("Installing LAVA apt-get dependencies")
    if not all(map(is_package_installed, LAVA_DEPS)):
        lava_system("sudo apt-get -y install {}".format(" ".join(LAVA_DEPS)))

    progress("In LAVA dir at {}".format(LAVA_DIR))
    # check to make sure we are not running as root/sudo
    if os.getuid() == 0:
        error("sudo/root privileges detected.  Run as user\nUSAGE: {}".format(sys.argv[0]))

    # check that user has docker install and docker privileges
    # if not exit and tell user to install docker (?)

    # check that user has the LAVA build docker vm build
    # if not run python scripts/build-docker.py
    progress("Checking that lava_guest docker is properly built")
    if False:
        build_docker = os.path.join(LAVA_DIR, "scripts/build-docker.py")
        lava_system("python {}".format(build_docker))

    # check for existence of folder /nas/$USER
    progress("Checking for /nas/" + USER)
    if not os.path.isdir("/nas/" + USER):
        lava_system("sudo mkdir -p /nas/" + USER)

    # ensure /etc/apt/sources.list has all of the deb-src lines uncommented
    patch_sources = os.path.join(LAVA_DIR, "scripts/patch-sources.py")
    lines = open("/etc/apt/sources.list")
    filt_lines = [line for line in lines if line.strip().startswith("#deb-src")
                  or line.strip().startswith("# deb-src")]
    if len(filt_lines) > 0:
        progress("Uncommenting {} deb-src lines in".format(len(filt_lines)) +
                 "/etc/apt/sources.list")
        lava_system("sudo python {}".format(patch_sources))

    # check for location of panda in PANDA_DIR
    # make sure that it is PANDA2
    progress("Checking for PANDA in " + PANDA_DIR)
    if not os.path.isdir(PANDA_DIR):
        os.chdir(os.path.dirname(PANDA_DIR))
        lava_system("wget {}".format(PANDA_UBUNTU))
        lava_system("chmod +x ./install_ubuntu.sh")
        lava_system("./install_ubuntu.sh")
        os.chdir(LAVA_DIR)

    progress("Checking for ODB orm libraries")
    ODB_PRESENT = (os.path.isfile("/usr/local/lib/libodb-pgsql.so") and 
                   os.path.isfile("/usr/local/lib/libodb.so") and
                   os.path.isfile("/usr/bin/odb"))
    if not ODB_PRESENT:
        os.chdir(os.environ["HOME"])
        odb_version="2.4.0"
        odb_baseurl="http://www.codesynthesis.com/download/odb/2.4/"
        lava_system("wget {}/odb_{}-1_amd64.deb".format(odb_baseurl, odb_version))
        lava_system("sudo dpkg -i odb_{}-1_amd64.deb".format(odb_version))
        lava_system("wget {}/libodb-{}.tar.gz".format(odb_baseurl, odb_version))
        lava_system("tar -xzvf libodb-{}.tar.gz".format(odb_version))
        os.chdir("libodb-{}/".format(odb_version))
        lava_system("./configure  && make -j && sudo make install")
        os.chdir("../")
        lava_system("wget {}/libodb-pgsql-{}.tar.gz".format(odb_baseurl, odb_version))
        lava_system("tar -xzvf libodb-pgsql-{}.tar.gz".format(odb_version))
        os.chdir("libodb-pgsql-{}/".format(odb_version))
        lava_system("./configure  && make -j && sudo make install")
        progress("Finished installing ODB libraries")
        progress("Feel free to delete the artifacts in" +
                 " {}".format(os.environ["HOME"]))
        os.chdir(LAVA_DIR)

    # check for clang in LLVM_DIR
    progress("Checking for clang " + LLVM_VERSION + " in " + LLVM_DIR)
    if not os.path.isdir(LLVM_DIR):
        get_clang = os.path.join(LAVA_DIR, "scripts/get-clang.sh")
        if not os.path.isdir(BUILD_DIR):
            os.makedirs(BUILD_DIR)
        os.chdir(BUILD_DIR)
        lava_system("{}".format(get_clang))

    os.chdir(LAVA_DIR)
    progress("Checking for libexec folder in $LAVA_DIR")
    if not os.path.isdir(os.path.join(LAVA_DIR, "libexec")):
        lava_system("btrace/compile.sh")

    ############## Beginning .mak file stuff ######################
    # I think this would be useful, but i'm seperating it out
    # in case anyone thinks it's a bad idea
    # the idea is that if someone wants llvm and panda installed in certain
    # locations, they can make their lava.mak ahead of time
    # then setup.py will parse it and configure the environmet to those specs
    progress("Creatgin for $LAVA_DIR/src_clang/config.mak")
    with open("src_clang/config.mak", "w") as f:
        f.write(LLVM_MAK.format(LLVM_BUILD_PATH=LLVM_DIR,
                                LLVM_SRC_PATH=LLVM_DIR))

    progress("Creating for $LAVA_DIR/fbi/panda.mak")
    with open(os.path.join(LAVA_DIR, "fbi/panda.mak"), "w") as f:
        f.write(PANDA_MAK.format(PANDA_DIR=PANDA_DIR))

    progress("Creating $LAVA_DIR/lava.mak")
    if not os.path.isfile(os.path.join(LAVA_DIR, "lava.mak")):
        lava_system("cat src_clang/config.mak >> lava.mak")
        lava_system("echo  >> lava.mak")
        lava_system("cat fbi/panda.mak >> lava.mak")

    ############## End .mak file stuff ######################
    progress("Making each component of lava, fbi and lavaTool")
    progress("Compiling fbi")
    os.chdir(os.path.join(LAVA_DIR, "fbi"))
    lava_system("make clean")
    os.chdir(os.path.join(LAVA_DIR, "src_clang"))
    lava_system("make clean")

    os.chdir(os.path.join(LAVA_DIR, "fbi"))
    lava_system("make -j {}".format(cpu_count()))
    os.chdir(os.path.join(LAVA_DIR, "src_clang"))
    lava_system("make -j {}".format(cpu_count()))
    os.chdir(LAVA_DIR)


    return 0

if __name__ == "__main__":
    sys.exit(main())
