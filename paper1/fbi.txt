# Tunable parameters
max_card: maximum cardinality a taint set can have
    before we exclude it
max_liveness: maximum liveness an input byte can 
    have before we exclude it
max_tcn: maximum taint compute number a DUA can
    have before we exclude it
bytes_needed: minimum number of bytes in a DUA

# Global data
liveness: map of file_offset => branch_count
duas: map of (source_loc,ast_name) => file_offsets
bugs: list of (dua, attack_point)

# Log entry types
tainted_branch:
    tainted_file_offsets:
        File offsets of tainted data involved in branch

taint_query:
    ast_name:
        Name of the program variable
    source_loc:
        File and line where the variable was queried
    tainted_bytes:
        Which bytes of the program variable are tainted
        Each byte has
         file_offsets:
            Which file input bytes this byte is derived from
         tcn:
            The taint compute number of this byte

attack_point:
    source_loc:
        File and line where the attack point occurs

def update_liveness_map(tainted_branch):
    for tainted_file_offset in tainted_branch:
        liveness[tainted_file_offset]++

def add_dua(taint_query):
    retained_bytes = []
    for tainted_byte in taint_query:
        if tainted_byte.tcn >= max_tcn:
            continue
        if len(tainted_byte.file_offsets) >= max_card:
            continue
        if max(liveness[off] for off in
                tainted_byte.file_offsets) >= max_liveness:
            continue
        retained_bytes += tainted_byte.file_offsets
    # Note that this will overwrite a previously-seen
    # DUA at the same source location
    duakey = (taint_query.sourceloc, taint_query.ast_name)
    duas[duakey] = retained_bytes

func create_bugs(attack_point):
    for dua in duas:
        viable_count = 0
        for file_offset in dua:
            if liveness[file_offset] < max_liveness:
                viable_count++
        if viable_count >= bytes_needed:
            bugs.add((dua, attack_point))

for log_entry in log:
    if log_entry is taint_query:
        add_dua(taint_query)
    elif log_entry is tanted_branch:
        update_liveness_map(tainted_branch)
    elif log_entry is attack_point:
        create_bugs(attack_point)
