#!/usr/bin/python

# import argparse
import os
import sys
import subprocess
import shlex
from string import Template
from os.path import join, isdir, isfile, dirname, abspath, basename
from colorama import Fore, Style

# constants to get rid of
MAKE_CMD = "make CFLAGS=-fvisibility=default CFLAGS+=-g -j 16"
CMD = "{install_dir}/bin/file -m {install_dir}/share/misc/magic.mgc {input_file}"
input_file = "/bin/ls"
main_file = "main.c"
# end constants to get rid of
QCOW_URL = "http://panda.moyix.net/~moyix/wheezy_panda2.qcow2"
TAR_URL = "ftp://ftp.astron.com/pub/file/file-5.22.tar.gz"
LAVA_DIR = dirname(abspath(sys.argv[0]))
os.chdir(LAVA_DIR)

def progress(msg):
    print('')
    print(Fore.GREEN + '[setup.py] ' + Fore.RESET + Style.BRIGHT + msg + Style.RESET_ALL)
def error(msg):
    print('')
    print(Fore.RED + '[setup.py] ' + Fore.RESET + Style.BRIGHT + msg + Style.RESET_ALL)
    sys.exit(1)

def cmd_to_list(cmd):
    cmd_args = shlex.split(cmd) if isinstance(cmd, str) else cmd
    cmd = subprocess.list2cmdline(cmd_args)
    return cmd, cmd_args
def run(cmd):
    cmd, cmd_args = cmd_to_list(cmd)
    try:
        progress("Running [{}] . . . ".format(cmd))
        subprocess.check_call(cmd_args)
    except subprocess.CalledProcessError:
        error("[{}] cmd did not execute properly.")
        raise


def main():
    # try to import lava.mak as a config file if not exit
    try:
        def_lines = (line.strip() for line in open("lava.mak", "r") if not line.strip().startswith("#")
                and line.strip() != "")
        def_lines = (line.split(":=") for line in def_lines)
        def_lines = ((line[0].strip(), line[1].strip()) for line in def_lines)
        LAVA_CONFS = dict(def_lines)
        PANDA_BUILD_DIR = LAVA_CONFS["PANDA_BUILD_DIR"]
    except Exception:
        error("Make sure to have properly configured lava.mak generated by setup.py")
    # parser = argparse.ArgumentParser(description='Setup LAVA')
    # parser.add_argument('-s', '--skip_docker_build', action='store_true', default = False,
            # help = 'Whether or not to skip building docker image')
    # args = parser.parse_args()
    # IGNORE_DOCKER = args.skip_docker_build
    progress("In LAVA dir at {}".format(LAVA_DIR))
    # create PROJ_HOME if it doesn't already exist
    PROJ_HOME = join(os.environ["HOME"], "lava")
    if not isdir(PROJ_HOME):
        os.mkdir(PROJ_HOME)

    # summon tar and qcow files
    os.chdir(PROJ_HOME)
    if not isfile(join(PROJ_HOME, basename(TAR_URL))):
        run(["wget", TAR_URL])
    if not isfile(join(PROJ_HOME, basename(QCOW_URL))):
        run(["wget", QCOW_URL])
    os.chdir(LAVA_DIR)

    # name is $program_$USER in order to avoid collisions
    name = "file_{}".format(os.environ["USER"])
    # populate configs
    json_configs = {}
    json_configs["PANDA_BUILD_DIR"] = PANDA_BUILD_DIR
    json_configs["QCOW"] = join(PROJ_HOME, basename(QCOW_URL))
    json_configs["DIRECTORY"] = PROJ_HOME
    json_configs["NAME"] = name
    json_configs["TAR_FILE"] = join(PROJ_HOME, basename(TAR_URL))
    json_configs["MAKE"] = MAKE_CMD
    json_configs["CMD"] = CMD
    json_configs["DB_NAME"] = name
    json_configs["MAIN_FILE"] = main_file
    json_configs["INPUT"] = input_file

    # write out json file
    out_json = join(PROJ_HOME, "{}.json".format(name))
    json_template = Template(open("lava_template.json").read())
    with open(out_json, 'w') as f:
        f.write(json_template.substitute(json_configs))

    progress("Sucessful!  Now run:\n  $ scripts/everything.sh -ak {}".format(out_json))
    return 0

if __name__ == "__main__":
    sys.exit(main())
