




struct CallExprArgAdditionHandler : public LavaMatchHandler {
    using LavaMatchHandler::LavaMatchHandler; // Inherit constructor.

    virtual void handle(const MatchFinder::MatchResult &Result) {
        const CallExpr *call = Result.Nodes.getNodeAs<CallExpr>("callExpr");
        const FunctionDecl *func = call->getDirectCallee();
        SourceLocation loc = clang::Lexer::findLocationAfterToken(
                call->getLocStart(), tok::l_paren, *Mod.sm, *Mod.LangOpts, true);
        
        auto fnname = get_containing_function_name(Result, *call);
        if (whitelist.size() >0 && whitelist.count(fnname) == 0) return;

        if (func == nullptr || func->getLocation().isInvalid()) {
            // Function Pointer
            // Function Pointer
            debug(FNARG) << "FUNCTION POINTER USE: ";
            call->getLocStart().print(debug(FNARG), *Mod.sm);
            debug(FNARG) << "this many args: " << call->getNumArgs() << "\n";
            loc = call->getArg(0)->getLocStart();
        }

        
