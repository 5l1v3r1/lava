



# End-to end LAVA for tshark.
# 6/23/15
# 
# Uses code tagged "lava_0" in both
#
# https://github.com/moyix/panda
#
# and 
#
# from https://bitbucket.org/moyix/lava



mkdir -p /nas/tleek/lava/tshark/src-to-src
mkdir -p /nas/tleek/lava/tshark/results



#
#################################
# Step 1 -- compile tshark with taint & attack point queries
#
# NB: all step 1 happens on laredo-26, which is a 32-bit debian 7.  
# It is set up to be a close match with the 32-bit debian 7 qcow we use for taint queries

cd ~/lava/src-to-src/wireshark-1.8.2
tar xzvf wireshark-1.8.2.orig-btrace.tgz 
mv wireshark-1.8.2.orig wireshark-1.8.2.queries
cd wireshark-1.8.2.queries/
make distclean
./configure --enable-editcap=no --enable-capinfos=no --enable-mergecap=no --enable-text2pcap=no --enable-dftest=no --enable-randpkt=no --enable-airpcap=no --enable-dumpcap=no --enable-rawshark=no --enable-wireshark=no --prefix=/home/tleek/lava/src-to-src/wireshark-1.8.2/wireshark-1.8.2.queries/install
time make -j 12
time make clean

# here we obtain the compile_commands.json
# this will take ~ 20 min
time ~/btrace/bin/sw-btrace make
time ~/btrace/bin/sw-btrace-to-compiledb ~moyix/git/llvm/Release+Asserts/lib/clang/3.6.1/include/
cd ..

# archive this result in case of blunder 
tar czvf wireshark-1.8.2.queries-btrace.tgz wireshark-1.8.2.queries

# this adds lava / panda headers to right directories & tries to compile.
# NB: compiling takes ~ 6 hours.  really.
cd ~/lava/src-to-src/wireshark-1.8.2
./add-queries-and-compile.sh >& oof

# since that took 6 hours, archive it. 
cp -r wireshark-1.8.2.queries /nas/tleek/lava/tshark/src-to-src/

# NB: strings db is in /home/tleek/tshark-lavadb (as specified in add-queries-and-compile.sh)
# this is what maps those numbers used in the taint queries to filenames and lval names.
# put it somewhere safe.
cp /home/tleek/tshark-lavadb /nas/tleek/lava/tshark/src-to-src/

# now you should have working tshark + libs in install dir
# you can test it on laredo-26 as follows.  it will be slow (all those queries) but should work.
#
## export LD_LIBRARY_PATH=~/lava/src-to-src/wireshark-1.8.2/wireshark-1.8.2.queries/install/lib
## cd ~/lava/src-to-src/wireshark-1.8.2/wireshark-1.8.2.queries/install
## ./bin/tshark -nnr /nas/brendan/malware.pcap


#
#################################
# Step 2 -- create PANDA recording of tshark with some inputs
# NOTE: PANDA must be compiled with -DLAVA in order for this stuff to work.

# this iso can be mounted by PANDA to get the instrumented tshark onto the guest
cd ~/lava/src-to-src/wireshark-1.8.2/wireshark-1.8.2.queries
genisoimage -R -J -o /nas/tleek/lava/tshark/tshark-queries.iso ./install

# Best to create recording on laptop VM or native linux desktop running PANDA
# since X is slow over network.
# You can find the qcow for deb7 that corresponds to laredo-26 here.
# Please copy instead of just using it in place!
# /nas/tleek/lava/qcows/deb7-notdesktop-32bit.qcow2    

# start up PANDA
cd ~/git/panda/qemu
# the redir bit allows you to ssh in if you need to
./i386-softmmu/qemu-system-i386 ./deb7-notdesktop-32bit.qcow2 -k en-us -monitor stdio -redir tcp:2222::22

# in the monitor (stdio for terminal you started qemu in, connect that .iso you created up to CD
(qemu) change ide1-cd0 tshark-queries.iso 

# In the PANDA deb7 guest, log in with qemu/infected
# Now do the following in the guest
sudo -s  (to become root)
mount /dev/cdrom /mnt
exit     (to stop being root)
export LD_LIBRARY_PATH=/mnt/lib

# Here is where you create the recording.
# In the monitor, begin recording
(qemu) begin_record tshark-queries

# Now, in the guest, type the following and hit enter
/mnt/bin/tshark -nnr malware.pcap

# Get back to the monitor and, when tshark has completed (takes a while with all those queries),
# end the recording
(qemu) end_record

# NB: malware.pcap should already be on that qcow.
# you can use different pcaps by first getting them onto the guest with scp.
# scp -P 2222 foo.pcap qemu@localhost:

Now put that recording on the nas
scp tshark-queries-rr-* tleek@laredo-26.mit.edu:/nas/tleek/lava/tshark/

#
#################################
# Step 3 -- taint analysis

# first, we run with taint analysis disabled to find out instr count for when that pcap gets opened.
# dont forget to change malware.pcap if you used a different input.
cd ~/git/panda/qemu
./i386-softmmu/qemu-system-i386 -replay /nas/tleek/lava/tshark/tshark-queries  -panda 'taint2:no_tp;file_taint:filename=malware.pcap,pos,notaint'

# examine what goes to std out to locate last instr in a progress line prior to malware.pcap opening
# for instance, I see
# ...
# tshark-queries:  1246351250 ( 54.00%) instrs.   65.10 sec.  0.27 GB ram.
# saw open of [malware.pcap]
# saw open of file we want to taint: [malware.pcap]
# ...
# and 1246351250 is last instr in progress line before malware.pcap opens.
# we use this to turn on taint analysis @ around 54% into the replay to speed up analysis

# here is how we actually do the taint analysis
# this takes about 20 minutes
cd ~/git/panda/qemu
./i386-softmmu/qemu-system-i386 -replay /nas/tleek/lava/tshark/tshark-queries  -pandalog /nas/tleek/lava/tshark/tshark-queries.plog -panda 'taint2:no_tp;file_taint:filename=malware.pcap,pos,first_instr=1246351250' -panda tainted_branch


# on laredo-26, clear the lava db for wireshark
psql -d tshark -U postgres -f ./lava.sql


# back on pompeii, use fbi to read pandalog and populate db with lava duas, atps, unique taint sets, and bugs
# NB: this takes about 5 min
ssh tleek@pompeii
cd ~/git/lava/panda 
./fbi  /nas/tleek/lava/tshark/tshark-queries.plog  /nas/tleek/lava/tshark/src-to-src/tshark-lavadb 5 5 5  malware.pcap /home/tleek/lava/src-to-src/wireshark-1.8.2/wireshark-1.8.2.queries



#
#################################
# Step 4 -- inject bugs & test


# on laredo-26, try to inject, build, and test 500 bugs

cd ~/git/lava/scripts
for i in {1..500}; do echo "Try # $i"; /usr/bin/python ./lava_inj_one.py; done
